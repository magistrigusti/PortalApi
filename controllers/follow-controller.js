// üìÅ controllers/follow-controller.js
const { prisma } = require('../prisma/prisma-client');

const FollowController = {
  followUser: async (req, res) => {
    const { followingId } = req.body;
    const userId = req.user.userId;

    if (!followingId) {
      return res.status(400).json({error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏'});
    }

    if (followingId === userId) {
      return res.status(400).json({error: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è —Å–∞–º–æ–≥–æ'});
    }

    try {
      const existingSubscription = await prisma.follows.findFirst({
        where: {
          AND: [
            { followerId: userId},
            { followingId }
          ]
        },
      });

      if (existingSubscription) {
        return res.status(400).json({error: '–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'});
      }

      await prisma.follows.create({
        data: {
          follower: { connect: { id: userId }},
          following: { connect: { id: followingId }},
        },
      });

      res.status(201).json({message: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å'});
    } catch (error) {
      console.error('Follow error', error);
      returnres.status(500).json({error: 'Internal server error'});
    }
  },
  unfollowUser: async (req, res) => {
    const userId = req.user.userId;
    const { id: followingId } = req.params;

    try{
      const follow = await prisma.follows.findFirst({
        where: {
          followerId: userId,
          followingId,
        },
      });

      if (!follow) {
        return res.status(404).json({error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});
      }

      await prisma.follows.delete({
        where: {id: follow.id},
      });

      res.status(200).json({message: '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'});
    } catch (error) {
      console.error('Unfollow error', error);
      return res.status(500).json({error: 'Internal server error'});
    }
  },
};

module.exports = FollowController;